#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the application environment.

  Usage: 
    $0 [options] [commands]

  Example:
    $0 -P -e test resetDatabase
    - This will reset the database in the applications's TEST environment.

    listDatabases <podName/>
      - List the databases hosted on a given postgresql pod instance.
      Example;
        $0 -e dev listdatabases wallet

    getRecordCounts <podName/> [<databaseName/>]
      - Gets a list of tables and the total number of record in each table.
        Examples;
          $0 -e dev getrecordcounts wallet agent_indy_cat_wallet
            - Get the record counts for the 'agent_indy_cat_wallet' database off the 'wallet' pod.

          $0 -e dev getrecordcounts event-db
          - Get the record counts for the '${POSTGRESQL_DATABASE}' (the pod's default database) database off the 'event-db' pod.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default 
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    resetDatabase
      - Drop and recreate the database.


EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;    
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  switchProject
  exitOnError

  dropAndRecreateDatabaseWithMigrations ${_apiPodName} ${_dbPodName}

  echoWarning "\nThe project's database has been reset."
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-django}
    dbPodName=${2:-postgresql}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  listdatabases)
    dbPodName=${1}
    listDatabases "${dbPodName}"
    ;;
  getrecordcounts)
    if (( $# <= 1 )); then
      dbPodName=${1}
    else
      dbPodName=${1}
      databaseName=${2}
    fi
    getRecordCounts "${dbPodName}" "${databaseName}"
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null
